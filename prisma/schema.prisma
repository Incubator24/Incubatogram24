// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id                    Int                     @id @default(autoincrement())
//   userName              String                  @unique
//   email                 String                  @unique
//   passwordHash          String?
//   passwordSalt          String?
//   createdAt             DateTime                @default(now())
//   updatedAt             DateTime                @default(now()) @updatedAt
//   isDeleted             Boolean                 @default(false)
//   accounts              Providers[]             @relation("UserAccounts")
//   device                Device[]
//   emailConfirmationUser EmailConfirmationUser[]
//   Profile               Profile?
// }

enum ProviderType {
  GOOGLE
  GITHUB
}

model User {
  id               Int               @id @default(autoincrement())
  userName         String            @unique
  email            String            @unique
  passwordHash     String?
  passwordSalt     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  isDeleted        Boolean           @default(false)
  githubId         String?
  githubEmail      String?
  googleId         String?
  googleEmail      String?
  device           Device[]
  EmailExpiration  EmailExpiration?
  PasswordRecovery PasswordRecovery?
  Profile          Profile?
}

model EmailExpiration {
  id               Int      @id @default(autoincrement())
  confirmationCode String
  emailExpiration  DateTime
  isConfirmed      Boolean
  user             User     @relation(fields: [userId], references: [id])
  userId           Int      @unique // relation scalar field (used in the `@relation` attribute above)
}

model PasswordRecovery {
  id           Int      @id @default(autoincrement())
  recoveryCode String
  expirationAt DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique // relation scalar field (used in the `@relation` attribute above)
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  country     String?
  city        String?
  aboutMe     String?
  avatarId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  Post        Post[]
}

model Post {
  id          Int         @id @default(autoincrement())
  description String? // Описание поста
  isDraft     Boolean     @default(false) // Черновик или опубликованная запись
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  profile     Profile     @relation(fields: [profileId], references: [id])
  profileId   Int
  images      PostImage[] // Связь с изображениями поста
}

model PostImage {
  id     Int    @id @default(autoincrement())
  url    String // URL загруженного изображения
  post   Post   @relation(fields: [postId], references: [id])
  fileId String
  postId Int
  order  Int? // Порядок изображений (если несколько)
}

model LoginAttempt {
  id       Int      @id @default(autoincrement())
  userName String
  url      String
  date     DateTime @default(now())
}

model TokensBlackList {
  id    Int    @id @default(autoincrement())
  token String
}

model Device {
  id           Int    @id @default(autoincrement())
  issuedAt     BigInt
  expirationAt BigInt
  deviceId     String
  ip           String
  deviceName   String
  user         User   @relation(references: [id], fields: [userId])
  userId       Int
}
