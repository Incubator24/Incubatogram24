// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  GOOGLE
  GITHUB
}

model User {
  id                    Int                     @id @default(autoincrement())
  userName              String                  @unique
  email                 String                  @unique
  name                  String?
  passwordHash          String?
  passwordSalt          String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
  posts                 Post[]
  accounts              Providers[]             @relation("UserAccounts") // Обратная связь
  device                Device[]
  emailConfirmationUser EmailConfirmationUser[]
  isDeleted             Boolean                 @default(false)
  firstName             String?
  lastName              String?
  dateOfBirth           DateTime?
  country               String?
  city                  String?
  aboutMe               String?
  avatarId              String?
}

model Providers {
  id         Int          @id @default(autoincrement())
  providerId String
  type       ProviderType
  email      String?
  userName   String?
  userId     Int
  owner      User         @relation("UserAccounts", fields: [userId], references: [id])
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(references: [id], fields: [userId])
  userId    Int
}

model LoginAttempt {
  id       Int      @id @default(autoincrement())
  userName String
  url      String
  date     DateTime @default(now())
}

model RecoveryCodes {
  id           Int    @id @default(autoincrement())
  email        String
  recoveryCode String
}

model TokensBlackList {
  id    Int    @id @default(autoincrement())
  token String
}

model Device {
  id           Int    @id @default(autoincrement())
  issuedAt     BigInt
  expirationAt BigInt
  deviceId     String
  ip           String
  deviceName   String
  user         User   @relation(references: [id], fields: [userId])
  userId       Int
}

model EmailConfirmationUser {
  id               Int     @id @default(autoincrement())
  confirmationCode String
  emailExpiration  String
  isConfirmed      Boolean
  user             User    @relation(references: [id], fields: [userId])
  userId           Int
}
