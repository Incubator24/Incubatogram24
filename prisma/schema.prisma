// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id                    Int                     @id @default(autoincrement())
//   userName              String                  @unique
//   email                 String                  @unique
//   passwordHash          String?
//   passwordSalt          String?
//   createdAt             DateTime                @default(now())
//   updatedAt             DateTime                @default(now()) @updatedAt
//   isDeleted             Boolean                 @default(false)
//   accounts              Providers[]             @relation("UserAccounts")
//   device                Device[]
//   emailConfirmationUser EmailConfirmationUser[]
//   Profile               Profile?
// }

enum ProviderType {
  GOOGLE
  GITHUB
}

model User {
  id                    Int               @id @default(autoincrement())
  userName              String            @unique
  email                 String            @unique
  passwordHash          String?
  passwordSalt          String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @default(now()) @updatedAt
  isDeleted             Boolean           @default(false)
  device                Device[]
  emailConfirmationUser EmailExpiration?  @relation("EmailConfirmationUser")
  emailConfirmationId   Int?              @unique // Уникальное поле для связи один к одному
  passwordRecovery      PasswordRecovery? @relation("PasswordRecoveryUser")
  passwordRecoveryId    Int?              @unique // Уникальное поле для связи один к одному
  Profile               Profile?
  Providers             Providers[]
}

model EmailExpiration {
  id               Int     @id @default(autoincrement())
  confirmationCode String
  emailExpiration  String
  isConfirmed      Boolean
  user             User    @relation("EmailConfirmationUser", fields: [userId], references: [emailConfirmationId])
  userId           Int     @unique // Уникальное поле для связи один к одному
}

model PasswordRecovery {
  id           Int    @id @default(autoincrement())
  recoveryCode String
  expirationAt String
  user         User   @relation("PasswordRecoveryUser", fields: [userId], references: [passwordRecoveryId])
  userId       Int    @unique // Уникальное поле для связи один к одному
}

model Profile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  country     String?
  city        String?
  aboutMe     String?
  avatarId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  // Post        Post[]
  // PostImages  PostImages[]
}

model Providers {
  id         Int          @id @default(autoincrement())
  providerId String
  type       ProviderType
  email      String?
  userName   String?
  userId     Int
  // owner      User         @relation("UserAccounts", fields: [userId], references: [id])
  User       User         @relation(fields: [userId], references: [id])
}

// model Post {
//   id          Int          @id @default(autoincrement())
//   description String?
//   isDeleted   Boolean      @default(false)
//   author      Profile      @relation(references: [id], fields: [authorId])
//   authorId    Int
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @default(now()) @updatedAt
//   PostImages  PostImages[]
// }

// model PostImages {
//   id       Int     @id @default(autoincrement())
//   imageId  String
//   post     Post    @relation(fields: [postId], references: [id])
//   postId   Int
//   author   Profile @relation(references: [id], fields: [authorId])
//   authorId Int
// }

model LoginAttempt {
  id       Int      @id @default(autoincrement())
  userName String
  url      String
  date     DateTime @default(now())
}

// model RecoveryCodes {
//   id           Int    @id @default(autoincrement())
//   email        String
//   recoveryCode String
// }

model TokensBlackList {
  id    Int    @id @default(autoincrement())
  token String
}

model Device {
  id           Int    @id @default(autoincrement())
  issuedAt     BigInt
  expirationAt BigInt
  deviceId     String
  ip           String
  deviceName   String
  user         User   @relation(references: [id], fields: [userId])
  userId       Int
}
